@page
@model ReportModel
@{
    ViewData["Title"] = "Report";
}



<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Th·ªëng K√™ Admin - Qu·∫£n L√Ω C√¢y Tr·ªìng</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <link rel="stylesheet" href="~/css/admin/report.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

</head>

<body>
    <div class="container-report">
        <!-- Header -->
        <div class="header">
            <h1>üìä Th·ªëng K√™ Qu·∫£n L√Ω C√¢y Tr·ªìng</h1>
            <p>T·ªïng quan v√† ph√¢n t√≠ch d·ªØ li·ªáu h·ªá th·ªëng</p>
        </div>

        <!-- Filters -->
        <div class="filters">
            <form method="get" class="filters" style="display:flex;gap:16px;align-items:center;">
                <div class="filter-group">
                    <label for="startDate">üìÖ T·ª´ ng√†y:</label>
                    <input type="text" id="startDate" name="startDate" value="@Request.Query["startDate"]"
                        autocomplete="off" />
                </div>
                <div class="filter-group">
                    <label for="endDate">üìÖ ƒê·∫øn ng√†y:</label>
                    <input type="text" id="endDate" name="endDate" value="@Request.Query["endDate"]"
                        autocomplete="off" />
                </div>
                <button type="submit" class="btn btn-info">L·ªçc</button>
            </form>

        </div>
        <div id="categoryTableModal" class="modal-bg" style="display:none;">
            <div class="modal-content">
                <span class="modal-close" id="closeCategoryModal">&times;</span>
                <h2>B·∫£ng ph√¢n b·ªë c√¢y tr·ªìng theo danh m·ª•c</h2>
                <table class="category-table">
                    <thead>
                        <tr>
                            <th>STT</th>
                            <th>Danh m·ª•c</th>
                            <th>S·ªë l∆∞·ª£ng c√¢y</th>
                            <th>T·ª∑ l·ªá (%)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.CategoryStats != null && Model.CategoryStats.Count > 0)
                        {
                            int total = Model.CategoryStats.Sum(x => x.PlantCount);
                            int idx = 1;
                            foreach (var cat in Model.CategoryStats)
                            {
                                <tr>
                                    <td>@idx</td>
                                    <td>@cat.CategoryName</td>
                                    <td>@cat.PlantCount</td>
                                    <td>
                                        @((total > 0 ? (cat.PlantCount * 100.0 / total) : 0).ToString("0.##"))
                                    </td>
                                </tr>
                                idx++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="4" style="text-align:center;">Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n b·ªë</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div id="favoriteTableModal" class="modal-bg" style="display:none;">
            <div class="modal-content">
                <span class="modal-close" id="closeFavoriteModal">&times;</span>
                <h2>B·∫£ng top c√¢y ƒë∆∞·ª£c y√™u th√≠ch</h2>
                <button class="btn-export-pdf" onclick="exportFavoriteTableToPDF()">Xu·∫•t PDF</button>
                <table class="favorite-table">
                    <thead>
                        <tr>
                            <th>STT</th>
                            <th>T√™n c√¢y</th>
                            <th>L∆∞·ª£t y√™u th√≠ch</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.TopFavorites != null && Model.TopFavorites.Count > 0)
                        {
                            int idx = 1;
                            foreach (var fav in Model.TopFavorites)
                            {
                                <tr>
                                    <td>@idx</td>
                                    <td>@fav.PlantName</td>
                                    <td>@fav.FavoriteCount</td>
                                </tr>
                                idx++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="3" style="text-align:center;">Kh√¥ng c√≥ d·ªØ li·ªáu y√™u th√≠ch</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <!-- Stats Cards -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-card-content">
                    <div class="stat-info">
                        <h3>T·ªïng s·ªë c√¢y tr·ªìng</h3>
                        <div class="stat-value" style="color: #10b981;">@Model.PlantSummary?.TotalPlants</div>

                    </div>
                    <div class="stat-icon" style="background: rgba(16, 185, 129, 0.1);">
                        <span style="color: #10b981;">üå±</span>
                    </div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-card-content">
                    <div class="stat-info">
                        <h3>T·ªïng s·ªë ng∆∞·ªùi d√πng</h3>
                        <div class="stat-value" style="color: #3b82f6;">@Model.UserSummary.TotalUsers</div>

                    </div>
                    <div class="stat-icon" style="background: rgba(59, 130, 246, 0.1);">
                        <span style="color: #3b82f6;">üë•</span>
                    </div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-card-content">
                    <div class="stat-info">
                        <h3>L∆∞·ª£t t√¨m ki·∫øm</h3>
                        <div class="stat-value" style="color: #f59e0b;">@Model.TopKeywords.Count</div>

                    </div>
                    <div class="stat-icon" style="background: rgba(245, 158, 11, 0.1);">
                        <span style="color: #f59e0b;">üîç</span>
                    </div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-card-content">
                    <div class="stat-info">
                        <h3>C√¢y y√™u th√≠ch</h3>
                        <div class="stat-value" style="color: #ef4444;">@Model.FavoriteTotal.Data</div>
                    </div>
                    <div class="stat-icon" style="background: rgba(239, 68, 68, 0.1);">
                        <span style="color: #ef4444;">‚ù§Ô∏è</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Row 1 -->
        <div class="charts-grid">
            <!-- Pie Chart -->
            <div class="chart-card">
                <div class="chart-header">
                    <h2>Ph√¢n b·ªë theo danh m·ª•c</h2>
                    <button class="btn-download" onclick="downloadChart('pieChart')">üì•</button>
                    <button id="btnShowCategoryTable" class="btn btn-info" style="">
                        Xem chi ti·∫øt
                    </button>
                    <a href="/Admin/Report?handler=ExportCategoryReport&startDate=@Request.Query["startDate"]&endDate=@Request.Query["endDate"]"
                        class="btn btn-danger">
                        Xu·∫•t PDF
                    </a>

                </div>
                <canvas id="pieChart"></canvas>
            </div>
            <!-- Keywords List -->
            <div class="chart-card">
                <div class="chart-header">
                    <h2>T·ª´ kh√≥a t√¨m ki·∫øm ph·ªï bi·∫øn</h2>
                    <button class="btn-download" onclick="exportKeywords()">üì•</button>
                </div>
                <ul class="keywords-list" id="keywordsList"></ul>
            </div>

        </div>

        <!-- Charts Row 2 -->
        <div class="charts-grid">
            <!-- Bar Chart -->

            <div class="chart-card">
                <div class="chart-header">
                    <h2>Top 5 c√¢y ƒë∆∞·ª£c y√™u th√≠ch</h2>
                    <button class="btn-download" onclick="downloadChart('barChart')">üì•</button>
                    <button id="btnShowFavoriteTable" class="btn btn-info" style="">
                        Xem chi ti·∫øt
                    </button>
                    <a href="/Admin/Report?handler=ExportTopFavoritesReport&startDate=@Request.Query["startDate"]&endDate=@Request.Query["endDate"]"
                        class="btn btn-danger" target="_blank">
                        Xu·∫•t PDF
                    </a>
                </div>
                <canvas id="barChart"></canvas>
            </div>
            <!-- Line Chart -->
            <div class="chart-card">
                <div class="chart-header">
                    <h2>S·ªë c√¢y th√™m m·ªõi m·ªói th√°ng</h2>
                    <button class="btn-download" onclick="downloadChart('lineChart')">üì•</button>
                </div>
                <canvas id="lineChart"></canvas>
            </div>

        </div>



        <!-- Summary Table -->
        <div class="summary-table">
            <div class="chart-header">
                <h2>B·∫£ng t·ªïng h·ª£p chi ti·∫øt</h2>
                <button class="btn-export" onclick="exportTableToExcel()">
                    <span>üì•</span>
                    <span>Xu·∫•t Excel</span>
                </button>
            </div>
            <table>
                <thead>
                    <tr>
                        <th>Danh m·ª•c</th>
                        <th style="text-align: right;">S·ªë l∆∞·ª£ng</th>
                        <th style="text-align: right;">T·ª∑ l·ªá</th>
                        <th style="text-align: right;">Xu h∆∞·ªõng</th>
                    </tr>
                </thead>
                <tbody id="summaryTableBody"></tbody>
            </table>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
        flatpickr("#startDate", {
            dateFormat: "Y-m-d",
            allowInput: true
        });
        flatpickr("#endDate", {
            dateFormat: "Y-m-d",
            allowInput: true
        });
    </script>
    <script>
        const data = {
            overview: {
                totalPlants: 245,
                totalSpecies: 180,
                totalUsers: 1523,
                totalSearches: 8947,
                activePlants: 230,
                newPlantsThisMonth: 15
            },
            plantsByCategory: [
                { name: 'C√¢y ƒÉn qu·∫£', count: 85, percentage: 34.7 },
                { name: 'C√¢y c√¥ng nghi·ªáp', count: 62, percentage: 25.3 },
                { name: 'C√¢y d∆∞·ª£c li·ªáu', count: 48, percentage: 19.6 },
                { name: 'C√¢y c·∫£nh', count: 35, percentage: 14.3 },
                { name: 'C√¢y kh√°c', count: 15, percentage: 6.1 }
            ],
            topFavorites: [
                { name: 'Hoa h·ªìng', favorites: 342 },
                { name: 'Lan h·ªì ƒëi·ªáp', favorites: 298 },
                { name: 'Sen ƒë√°', favorites: 256 },
                { name: 'Phong lan', favorites: 234 },
                { name: 'X∆∞∆°ng r·ªìng', favorites: 189 },
                { name: 'Bonsai', favorites: 167 },
                { name: 'C√¢y xanh vƒÉn ph√≤ng', favorites: 145 },
                { name: 'C√¢y thu·ªëc', favorites: 132 }
            ],
            searchTrends: [
                { month: 'T1', searches: 6 },
                { month: 'T2', searches: 7 },
                { month: 'T3', searches: 8 },
                { month: 'T4', searches: 9 },
                { month: 'T5', searches: 11 },
                { month: 'T6', searches: 10 },
                { month: 'T7', searches: 9 },
                { month: 'T8', searches: 11 },
                { month: 'T9', searches: 12 },
                { month: 'T10', searches: 8 }
            ],
            newPlantsMonthly: [
                { month: 'T1', plants: 12 },
                { month: 'T2', plants: 15 },
                { month: 'T3', plants: 18 },
                { month: 'T4', plants: 22 },
                { month: 'T5', plants: 25 },
                { month: 'T6', plants: 20 },
                { month: 'T7', plants: 16 },
                { month: 'T8', plants: 19 },
                { month: 'T9', plants: 23 },
                { month: 'T10', plants: 15 }
            ],
            topSearchKeywords: [
                { keyword: 'c√¢y c·∫£nh', count: 523 },
                { keyword: 'c√¢y d∆∞·ª£c li·ªáu', count: 487 },
                { keyword: 'sen ƒë√°', count: 456 },
                { keyword: 'hoa h·ªìng', count: 423 },
                { keyword: 'lan', count: 398 },
                { keyword: 'bonsai', count: 367 },
                { keyword: 'c√¢y vƒÉn ph√≤ng', count: 334 },
                { keyword: 'x∆∞∆°ng r·ªìng', count: 298 }
            ],
            userActivity: [
                { month: 'T1', newUsers: 142, activeUsers: 890 },
                { month: 'T2', newUsers: 156, activeUsers: 920 },
                { month: 'T3', newUsers: 178, activeUsers: 985 },
                { month: 'T4', newUsers: 192, activeUsers: 1050 },
                { month: 'T5', newUsers: 203, activeUsers: 1120 },
                { month: 'T6', newUsers: 187, activeUsers: 1090 },
                { month: 'T7', newUsers: 165, activeUsers: 1010 },
                { month: 'T8', newUsers: 198, activeUsers: 1150 },
                { month: 'T9', newUsers: 215, activeUsers: 1280 },
                { month: 'T10', newUsers: 176, activeUsers: 1200 }
            ]
        };
        const categories = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.CategoryStats));

        const topFavorites = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.TopFavorites));

        const topKeywords = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.TopKeywords));
        @* const newPlants = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.NewPlantsPerMonth)); *@
            @* const userActivity = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.UserActivityStats)); *@

        // V√≠ d·ª• cho t·ªïng s·ªë, b·∫°n c√≥ th·ªÉ g√°n tr·ª±c ti·∫øp
        const totalPlants = @Model.PlantSummary?.TotalPlants ?? 0;
        const totalUsers = @Model.UserSummary?.TotalUsers ?? 0;

        console.log('categories:', categories);
        console.log('topFavorites:', topFavorites);
        console.log('topKeywords:', topKeywords);
        console.log('totalPlants:', totalPlants);
        console.log('totalUsers:', totalUsers);




        // Initialize Pie Chart
        const pieCtx = document.getElementById('pieChart').getContext('2d');
        new Chart(pieCtx, {
            type: 'pie',
            data: {
                labels: categories.map(c => c.CategoryName),
                datasets: [{
                    data: categories.map(c => c.PlantCount),
                    backgroundColor: [
                        '#10b981',
                        '#3b82f6',
                        '#f59e0b',
                        '#ef4444',
                        '#8b5cf6',
                        '#6366f1',
                        '#f43f5e',
                        '#22d3ee',
                        '#fbbf24',
                        '#84cc16',
                        '#eab308',
                        '#0ea5e9',
                        '#f87171',
                        '#a3e635',
                        '#f472b6',
                        '#d946ef',
                        '#818cf8',
                        '#fb7185',
                        '#fde68a',
                        '#4ade80'
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });

        const barCtx = document.getElementById('barChart').getContext('2d');
        new Chart(barCtx, {
            type: 'bar',
            data: {
                labels: topFavorites.map(f => f.PlantName),
                datasets: [{
                    label: 'L∆∞·ª£t y√™u th√≠ch',
                    data: topFavorites.map(f => Number(f.FavoriteCount)),
                    backgroundColor: '#10b981'
                }]
            },
            options: {
                responsive: true,
                indexAxis: 'x',
                plugins: { legend: { display: false } },
                scales: { x: { beginAtZero: true } }
            }
        });


        // Initialize Line Chart
        const lineCtx = document.getElementById('lineChart').getContext('2d');
        new Chart(lineCtx, {
            type: 'line',
            data: {
                labels: data.searchTrends.map(s => s.month),
                datasets: [{
                    label: 'L∆∞·ª£t t√¨m ki·∫øm',
                    data: data.searchTrends.map(s => s.searches),
                    borderColor: '#10b981',
                    backgroundColor: 'rgba(16, 185, 129, 0.1)',
                    tension: 0.4,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });



        @* // Initialize New Plants Chart
        const newPlantsCtx = document.getElementById('newPlantsChart').getContext('2d');
        new Chart(newPlantsCtx, {
            type: 'bar',
            data: {
                labels: data.newPlants.map(p => p.month),
                datasets: [{
                    label: 'S·ªë l∆∞·ª£ng c√¢y m·ªõi',
                    data: data.newPlants.map(p => p.plants),
                    backgroundColor: '#10b981'
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        }); *@

            @* // Initialize User Activity Chart
        const userActivityCtx = document.getElementById('userActivityChart').getContext('2d');
        new Chart(userActivityCtx, {
            type: 'line',
            data: {
                labels: data.userActivity.months,
                datasets: [{
                    label: 'Ng∆∞·ªùi d√πng m·ªõi',
                    data: data.userActivity.newUsers,
                    borderColor: '#3b82f6',
                    backgroundColor: 'rgba(59, 130, 246, 0.1)',
                    tension: 0.4
                }, {
                    label: 'Ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông',
                    data: data.userActivity.activeUsers,
                    borderColor: '#10b981',
                    backgroundColor: 'rgba(16, 185, 129, 0.1)',
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        }); *@

        // Render Keywords List
        const keywordsList = document.getElementById('keywordsList');
        const maxCount = data.topKeywords[0].count;
        data.topKeywords.forEach((item, index) => {
            const percentage = (item.count / maxCount) * 100;
            keywordsList.innerHTML += `
                <li class="keyword-item">
                    <div class="keyword-left">
                        <span class="keyword-rank">#${index + 1}</span>
                        <span class="keyword-name">${item.keyword}</span>
                    </div>
                    <div class="keyword-right">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${percentage}%"></div>
                        </div>
                        <span class="keyword-count">${item.count}</span>
                    </div>
                </li>
            `;
        });

        // Render Summary Table
        const tableBody = document.getElementById('summaryTableBody');
        data.categories.forEach(item => {
            const trend = (Math.random() * 10).toFixed(1);
            tableBody.innerHTML += `
                <tr>
                    <td>${item.name}</td>
                    <td style="text-align: right;">${item.count}</td>
                    <td style="text-align: right;">${item.percentage}%</td>
                    <td style="text-align: right;">
                        <span class="trend-up">‚Üó +${trend}%</span>
                    </td>
                </tr>
            `;
        });

        // Export Functions
        function downloadChart(chartId) {
            const canvas = document.getElementById(chartId);
            const url = canvas.toDataURL('image/png');
            const link = document.createElement('a');
            link.download = `${chartId}_${new Date().toISOString().split('T')[0]}.png`;
            link.href = url;
            link.click();
            alert('ƒê√£ t·∫£i xu·ªëng bi·ªÉu ƒë·ªì!');
        }

        function exportKeywords() {
            const csv = 'STT,T·ª´ kh√≥a,S·ªë l∆∞·ª£t t√¨m\n' +
                data.topKeywords.map((k, i) => `${i + 1},${k.keyword},${k.count}`).join('\n');
            downloadCSV(csv, 'tu-khoa-tim-kiem');
        }

        function exportReport() {
            const csv = 'Danh m·ª•c,S·ªë l∆∞·ª£ng,T·ª∑ l·ªá\n' +
                data.categories.map(c => `${c.name},${c.count},${c.percentage}%`).join('\n');
            downloadCSV(csv, 'bao-cao-tong-quan');
        }

        function exportTableToExcel() {
            const csv = 'Danh m·ª•c,S·ªë l∆∞·ª£ng,T·ª∑ l·ªá,Xu h∆∞·ªõng\n' +
                data.categories.map(c => {
                    const trend = (Math.random() * 10).toFixed(1);
                    return `${c.name},${c.count},${c.percentage}%,+${trend}%`;
                }).join('\n');
            downloadCSV(csv, 'bang-tong-hop');
        }

        function downloadCSV(content, filename) {
            const BOM = '\uFEFF';
            const blob = new Blob([BOM + content], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `${filename}_${new Date().toISOString().split('T')[0]}.csv`;
            link.click();
            alert('ƒê√£ xu·∫•t b√°o c√°o th√†nh c√¥ng!');
        }
    </script>

    <script>
        document.getElementById("btnShowCategoryTable").onclick = function () {
            document.getElementById("categoryTableModal").style.display = "flex";
        };
        document.getElementById("closeCategoryModal").onclick = function () {
            document.getElementById("categoryTableModal").style.display = "none";
        };
        // ƒê√≥ng khi click ra ngo√†i modal-content
        document.getElementById("categoryTableModal").onclick = function (e) {
            if (e.target === this) {
                this.style.display = "none";
            }
        }
    </script>

    <script>
        document.getElementById("btnShowFavoriteTable").onclick = function () {
            document.getElementById("favoriteTableModal").style.display = "flex";
        };
        document.getElementById("closeFavoriteModal").onclick = function () {
            document.getElementById("favoriteTableModal").style.display = "none";
        };
        // ƒê√≥ng khi click ra ngo√†i modal-content
        document.getElementById("favoriteTableModal").onclick = function (e) {
            if (e.target === this) {
                this.style.display = "none";
            }
        };
    </script>
</body>

</html>