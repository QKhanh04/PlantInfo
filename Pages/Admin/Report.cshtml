@page
@using PlantManagement.DTOs
@model ReportModel
@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "üìä Th·ªëng K√™ Qu·∫£n L√Ω C√¢y Tr·ªìng";
}

<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Th·ªëng K√™ Admin - Qu·∫£n L√Ω C√¢y Tr·ªìng</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    @* <link rel="stylesheet" *@
    @* href="https://cdn.jsdelivr.net/npm/@@eonasdan/tempus-dominus@6/dist/css/tempus-dominus.min.css"> *@
    <link rel="stylesheet" href="~/css/admin/report.css">
</head>

<body>
    <div class="container-report">

        <!-- Filters -->
        <div class="filters">
            <form method="get" style="display:flex; gap:16px; align-items:flex-end; flex-wrap:wrap; width:100%;">
                <div class="filter-group">
                    <label for="startDate">T·ª´ ng√†y</label>
                    <input type="text" id="startDate" name="startDate" value="@Request.Query["startDate"]"
                        autocomplete="off" />
                </div>
                <div class="filter-group">
                    <label for="endDate">ƒê·∫øn ng√†y</label>
                    <input type="text" id="endDate" name="endDate" value="@Request.Query["endDate"]"
                        autocomplete="off" />
                </div>
                <button type="submit" class="btn btn-filter">L·ªçc</button>
            </form>
        </div>

        <!-- Modals -->
        <div id="categoryTableModal" class="modal-bg">
            <div class="modal-content">
                <button class="modal-close" onclick="closeCategoryModal()">&times;</button>
                <h2>Ph√¢n b·ªë c√¢y tr·ªìng theo danh m·ª•c</h2>
                <table class="category-table">
                    <thead>
                        <tr>
                            <th>STT</th>
                            <th>Danh m·ª•c</th>
                            <th>S·ªë l∆∞·ª£ng</th>
                            <th>T·ª∑ l·ªá</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.CategoryStats != null && Model.CategoryStats.Count > 0)
                        {
                            int total = Model.CategoryStats.Sum(x => x.PlantCount);
                            int idx = 1;
                            foreach (var cat in Model.CategoryStats)
                            {
                                <tr>
                                    <td>@idx</td>
                                    <td>@cat.CategoryName</td>
                                    <td>@cat.PlantCount</td>
                                    <td>@((total > 0 ? (cat.PlantCount * 100.0 / total) : 0).ToString("0.##"))%</td>
                                </tr>
                                idx++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="4" style="text-align:center;">Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n b·ªë</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div id="favoriteTableModal" class="modal-bg">
            <div class="modal-content">
                <button class="modal-close" onclick="closeFavoriteModal()">&times;</button>
                <h2>Top c√¢y ƒë∆∞·ª£c y√™u th√≠ch</h2>
                <table class="favorite-table">
                    <thead>
                        <tr>
                            <th>STT</th>
                            <th>T√™n c√¢y</th>
                            <th>L∆∞·ª£t y√™u th√≠ch</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.TopFavorites != null && Model.TopFavorites.Count > 0)
                        {
                            int idx = 1;
                            foreach (var fav in Model.TopFavorites)
                            {
                                <tr>
                                    <td>@idx</td>
                                    <td>@fav.PlantName</td>
                                    <td>@fav.FavoriteCount</td>
                                </tr>
                                idx++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="3" style="text-align:center;">Kh√¥ng c√≥ d·ªØ li·ªáu y√™u th√≠ch</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div id="topViewModal" class="modal-bg">
            <div class="modal-content">
                <button class="modal-close" onclick="closeTopViewModal()">&times;</button>
                <h2>Top c√¢y ƒë∆∞·ª£c xem nhi·ªÅu nh·∫•t</h2>
                <table class="favorite-table">
                    <thead>
                        <tr>
                            <th>STT</th>
                            <th>T√™n c√¢y</th>
                            <th>L∆∞·ª£t Xem</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.TopFavorites != null && Model.TopFavorites.Count > 0)
                        {
                            int idx = 1;
                            foreach (var top in Model.TopPlantView)
                            {
                                <tr>
                                    <td>@idx</td>
                                    <td>@top.PlantName</td>
                                    <td>@top.ViewCount</td>
                                </tr>
                                idx++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="3" style="text-align:center;">Kh√¥ng c√≥ d·ªØ li·ªáu </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-card-content">
                    <div class="stat-info">
                        <h3>T·ªïng s·ªë c√¢y tr·ªìng</h3>
                        <div class="stat-value">@Model.PlantSummary?.TotalPlants</div>
                    </div>
                    <div class="stat-icon">üå±</div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-card-content">
                    <div class="stat-info">
                        <h3>T·ªïng s·ªë ng∆∞·ªùi d√πng</h3>
                        <div class="stat-value">@Model.UserSummary.TotalUsers</div>
                    </div>
                    <div class="stat-icon">üë•</div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-card-content">
                    <div class="stat-info">
                        <h3>L∆∞·ª£t t√¨m ki·∫øm</h3>
                        <div class="stat-value">@Model.TopKeywords.Count</div>
                    </div>
                    <div class="stat-icon">üîç</div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-card-content">
                    <div class="stat-info">
                        <h3>C√¢y y√™u th√≠ch</h3>
                        <div class="stat-value">@Model.FavoriteTotal.Data</div>
                    </div>
                    <div class="stat-icon">‚ù§Ô∏è</div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-card-content">
                    <div class="stat-info">
                        <h3>T·ªïng l∆∞·ª£t xem</h3>
                        <div class="stat-value">@Model.TopViewTotal.Data</div>
                    </div>
                    <div class="stat-icon"></div>
                </div>
            </div>
        </div>

        <!-- Charts Row 1 -->
        <div class="charts-grid">
            <div class="chart-card">
                <div class="chart-header">
                    <h2>Ph√¢n b·ªë theo danh m·ª•c</h2>
                    <div style="display: flex; gap: 8px;">
                        <button class="btn-download" onclick="downloadChart('pieChart')">üì•</button>
                        <button class="btn btn-info" onclick="openCategoryModal()">Chi ti·∫øt</button>
                        <a href="/Admin/Report?handler=ExportCategoryReport&startDate=@Request.Query["startDate"]&endDate=@Request.Query["endDate"]"
                            class="btn btn-danger btn-export-pdf">
                            Xu·∫•t PDF
                        </a>
                    </div>
                </div>
                <div style="max-width:600px; margin:0 auto;">
                    <canvas id="pieChart"></canvas>
                </div>
            </div>

            <div class="chart-card">
                <div class="chart-header">
                    <h2>T·ª´ kh√≥a t√¨m ki·∫øm ph·ªï bi·∫øn</h2>
                    <button class="btn-download" onclick="exportKeywords()">üì•</button>
                </div>
                <ul class="keywords-list" id="keywordsList"></ul>
            </div>
        </div>

        <!-- Charts Row 2 -->
        <div class="charts-grid">
            <div class="chart-card">
                <div class="chart-header">
                    <h2>Top c√¢y ƒë∆∞·ª£c y√™u th√≠ch</h2>
                    <div style="display: flex; gap: 8px;">
                        <button class="btn-download" onclick="downloadChart('barChart')">üì•</button>
                        <button class="btn btn-info" onclick="openFavoriteModal()">Chi ti·∫øt</button>
                        <a href="/Admin/Report?handler=ExportTopFavoritesReport&startDate=@Request.Query["startDate"]&endDate=@Request.Query["endDate"]"
                            class="btn btn-danger btn-export-pdf">
                            Xu·∫•t PDF
                        </a>
                    </div>
                </div>
                <canvas id="barChart"></canvas>
            </div>
            <div class="chart-card">
                <div class="chart-header">
                    <h2>Top c√¢y ƒë∆∞·ª£c xem nhi·ªÅu nh·∫•t</h2>
                    <div style="display: flex; gap: 8px;">
                        <button class="btn-download" onclick="downloadChart('topViewChart')">üì•</button>
                        <button class="btn btn-info" onclick="openTopViewModal()">Chi ti·∫øt</button>
                        <a href="/Admin/Report?handler=OnGetExportTopV·ªâewReportAsync&startDate=@Request.Query["startDate"]&endDate=@Request.Query["endDate"]"
                            class="btn btn-danger btn-export-pdf">
                            Xu·∫•t PDF
                        </a>
                    </div>
                </div>
                <canvas id="topViewChart"></canvas>
            </div>

        </div>

        <div class="charts-grid">
            <div class="chart-card">
                <div class="chart-header" style="display: flex; align-items: center; gap: 16px;">
                    <h2>S·ªë c√¢y th√™m m·ªõi v√† ng∆∞·ªùi ƒëƒÉng k√Ω m·ªói th√°ng</h2>
                    <select id="yearSelector" style="padding: 4px 8px;">
                        @for (int y = DateTime.Now.Year; y >= DateTime.Now.Year - 5; y--)
                        {
                            var selected = y == DateTime.Now.Year ? "selected" : "";
                            <option value="@y" selected="@selected">@y</option>
                        }
                    </select>
                    <button class="btn-download" onclick="downloadChart('plantMonthChart')">üì•</button>
                </div>
                <canvas id="plantMonthChart" height="100"></canvas>
            </div>
        </div>


        @* <!-- Summary Table -->
        <div class="summary-table">
            <div class="chart-header" style="margin-bottom: 20px;">
                <h2>B·∫£ng t·ªïng h·ª£p chi ti·∫øt</h2>
                <button class="btn-export" onclick="exportTableToExcel()">üì• Xu·∫•t Excel</button>
            </div>
            <table>
                <thead>
                    <tr>
                        <th>Danh m·ª•c</th>
                        <th style="text-align: right;">S·ªë l∆∞·ª£ng</th>
                        <th style="text-align: right;">T·ª∑ l·ªá</th>
                        <th style="text-align: right;">Xu h∆∞·ªõng</th>
                    </tr>
                </thead>
                <tbody id="summaryTableBody"></tbody>
            </table>
        </div>
    </div> *@

        <script>

            document.getElementById('yearSelector').addEventListener('change', function () {
                const selectedYear = this.value;
                const url = new URL(window.location.href);
                url.searchParams.set('year', selectedYear); // Thay 'year' b·∫±ng t√™n tham s·ªë b·∫°n x·ª≠ l√Ω ·ªü backend
                window.location.href = url.toString();
            });
            const categories = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.CategoryStats ?? new List<CategoryStatDto>()));
            const topFavorites = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.TopFavorites ?? new List<FavoriteStatDto>()));
            const topKeywords = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.TopKeywords ?? new List<KeywordStatDto>()));
            const plantMonthly = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.PlantMonthly ?? new List<PlantMonthlyStatDto>()));
            const userMonthly = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.UserMonthly ?? new List<UserMonthlyStatDto>()));
            const topPLantView = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.TopPlantView ?? new List<PlantViewStatDto>()));

            console.log(userMonthly)
            // Initialize Pie Chart
            const pieCtx = document.getElementById('pieChart').getContext('2d');
            new Chart(pieCtx, {
                type: 'pie',
                data: {
                    labels: categories.map(c => c.CategoryName),
                    datasets: [{
                        data: categories.map(c => c.PlantCount),
                        backgroundColor: [
                            '#3b82f6', // Blue
                            '#8b5cf6', // Purple
                            '#f59e0b', // Amber
                            '#ef4444', // Red
                            '#10b981', // Green

                            '#6366f1', // Indigo
                            '#f43f5e', // Rose
                            '#22d3ee', // Cyan
                            '#fde68a', // Yellow
                            '#a3e635', // Lime
                            '#38bdf8', // Sky Blue
                            '#eab308', // Gold
                            '#fca5a5', // Light Red
                            '#f472b6', // Pink
                            '#4ade80', // Light Green
                            '#818cf8', // Light Indigo
                            '#f87171', // Salmon
                            '#2dd4bf', // Teal
                            '#facc15', // Yellow
                            '#c026d3', // Fuchsia
                            '#fb7185', // Light Rose
                            '#64748b', // Slate
                            '#0891b2', // Dark Cyan
                            '#78716c', // Stone
                        ],
                        borderColor: '#ffffff',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                padding: 16,
                                font: { size: 13, weight: '500' },
                                color: '#627d6b'
                            }
                        }
                    }
                }
            });

            // Initialize Bar Chart
            const barCtx = document.getElementById('barChart').getContext('2d');
            new Chart(barCtx, {
                type: 'bar',
                data: {
                    labels: topFavorites.map(f => f.PlantName),
                    datasets: [{
                        label: 'L∆∞·ª£t y√™u th√≠ch',
                        data: topFavorites.map(f => Number(f.FavoriteCount)),
                        backgroundColor: '#f43f5e',
                        borderRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    indexAxis: 'y',
                    plugins: { legend: { display: false } },
                    scales: {
                        y: { beginAtZero: true },
                        x: { beginAtZero: true }
                    }
                }
            });

            const topViewbarCtx = document.getElementById('topViewChart').getContext('2d');
            new Chart(topViewbarCtx, {
                type: 'bar',
                data: {
                    labels: topPLantView.map(v => v.PlantName),
                    datasets: [{
                        label: 'Top c√¢y c√≥ l∆∞·ª£t xem nhi·ªÅu nh·∫•t',
                        data: topPLantView.map(v => Number(v.ViewCount)),
                        backgroundColor: '#006600',
                        borderRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    indexAxis: 'x',
                    plugins: { legend: { display: false } },
                    scales: {
                        y: { beginAtZero: true },
                        x: { beginAtZero: true }
                    }
                }
            });


            const months = Array.from({ length: 12 }, (_, i) => i + 1); // [1, 2, ..., 12]

            const plantCountByMonth = months.map(m => {
                const found = plantMonthly.find(pm => Number(pm.Month) === m);
                return found ? Number(found.PlantCount) : 0;
            });
            const userCountByMonth = months.map(m => {
                const found = userMonthly.find(um => Number(um.Month) === m);
                return found ? Number(found.UserCount) : 0;
            });
            const plantCtx = document.getElementById('plantMonthChart').getContext('2d');
            // Initialize Plant Monthly Chart
            new Chart(plantCtx, {
                type: 'line',
                data: {
                    labels: months.map(m => `T${m}`),
                    datasets: [
                        {
                            label: 'S·ªë l∆∞·ª£ng c√¢y ƒë∆∞·ª£c th√™m',
                            data: plantCountByMonth,
                            borderColor: '#006600',
                            borderRadius: 4,
                            tension: 0.4
                        },
                        {
                            label: 'S·ªë l∆∞·ª£ng ng∆∞·ªùi ƒëƒÉng k√Ω',
                            data: userCountByMonth,
                            borderColor: '#663300',
                            borderRadius: 4,
                            tension: 0.4
                        }
                    ]
                },
                options: {
                    responsive: true,
                    indexAxis: 'x',
                    plugins: {
                        legend:
                        {
                            display: true,
                            @* position: 'bottom' *@
                        }
                    }, // ƒê·ªÉ ph√¢n bi·ªát c√°c line
                scales: {
                y: { beginAtZero: true }
            }
                }
            });

            // Render Keywords List
            const keywordsList = document.getElementById('keywordsList');
            if (topKeywords.length > 0) {
                const maxCount = topKeywords[0].count;
                topKeywords.forEach((item, index) => {
                    const percentage = (item.count / maxCount) * 100;
                    keywordsList.innerHTML += `
                    <li class="keyword-item">
                        <div class="keyword-left">
                            <span class="keyword-rank">#${index + 1}</span>
                            <span class="keyword-name">${item.keyword}</span>
                        </div>
                        <div class="keyword-right">
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${percentage}%"></div>
                            </div>
                            <span class="keyword-count">${item.count}</span>
                        </div>
                    </li>
                `;
                });
            }

            // Modal Functions
            function openCategoryModal() {
                document.getElementById('categoryTableModal').classList.add('active');
            }

            function closeCategoryModal() {
                document.getElementById('categoryTableModal').classList.remove('active');
            }

            function openFavoriteModal() {
                document.getElementById('favoriteTableModal').classList.add('active');
            }

            function closeFavoriteModal() {
                document.getElementById('favoriteTableModal').classList.remove('active');
            }

            function openTopViewModal() {
                document.getElementById('topViewModal').classList.add('active');
            }

            function closeTopViewModal() {
                document.getElementById('topViewModal').classList.remove('active');
            }

            // Close modal when clicking outside
            document.getElementById('categoryTableModal').addEventListener('click', (e) => {
                if (e.target.id === 'categoryTableModal') closeCategoryModal();
            });

            document.getElementById('favoriteTableModal').addEventListener('click', (e) => {
                if (e.target.id === 'favoriteTableModal') closeFavoriteModal();
            });

            document.getElementById('topViewModal').addEventListener('click', (e) => {
                if (e.target.id === 'topViewModal') closeTopViewModal();
            });

            // Export Functions
            function downloadChart(chartId) {
                const canvas = document.getElementById(chartId);
                const url = canvas.toDataURL('image/png');
                const link = document.createElement('a');
                link.download = `${chartId}_${new Date().toISOString().split('T')[0]}.png`;
                link.href = url;
                link.click();
            }


        </script>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const startPicker = new tempusDominus.TempusDominus(document.getElementById('startDate'), {
                    localization: {
                        format: 'yyyy-MM-dd'
                    },
                    display: {
                        components: {
                            calendar: true,
                            date: true,
                            month: true,
                            year: true,
                            decades: true,
                            clock: false
                        }
                    }
                });
                const endPicker = new tempusDominus.TempusDominus(document.getElementById('endDate'), {
                    localization: {
                        format: 'yyyy-MM-dd'
                    },
                    display: {
                        components: {
                            calendar: true,
                            date: true,
                            month: true,
                            year: true,
                            decades: true,
                            clock: false
                        }
                    }
                });

                // Khi ch·ªçn "T·ª´ ng√†y", ch·∫∑n "ƒê·∫øn ng√†y" nh·ªè h∆°n
                document.getElementById('startDate').addEventListener('change', function (e) {
                    const startDate = e.target.value;
                    if (startDate) {
                        endPicker.updateOptions({
                            restrictions: {
                                minDate: new Date(startDate)
                            }
                        });
                        if (document.getElementById('endDate').value && document.getElementById('endDate').value < startDate) {
                            document.getElementById('endDate').value = startDate;
                        }
                    }
                });
            });
        </script>
</body>

</html>