@page
@model ReportModel
@{
    ViewData["Title"] = "Report";
}



<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Th·ªëng K√™ Admin - Qu·∫£n L√Ω C√¢y Tr·ªìng</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <link rel="stylesheet" href="~/css/admin/report.css">
</head>

<body>
    <div class="container-report">
        <!-- Header -->
        <div class="header">
            <h1>üìä Th·ªëng K√™ Qu·∫£n L√Ω C√¢y Tr·ªìng</h1>
            <p>T·ªïng quan v√† ph√¢n t√≠ch d·ªØ li·ªáu h·ªá th·ªëng</p>
        </div>

        <!-- Filters -->
        <div class="filters">
            <!-- B·ªô l·ªçc th·ªùi gian nhanh -->
            <div class="filter-group">
                <label>üìÖ Th·ªùi gian nhanh:</label>
                <select id="dateRange">
                    <option value="today">H√¥m nay</option>
                    <option value="thisWeek">Tu·∫ßn n√†y</option>
                    <option value="thisMonth" selected>Th√°ng n√†y</option>
                    <option value="thisYear">NƒÉm n√†y</option>
                    <option value="all">T·∫•t c·∫£</option>
                </select>
            </div>

            <!-- B·ªô l·ªçc ch·ªçn ng√†y c·ª• th·ªÉ -->
            <div class="filter-group">
                <label>üìÜ T·ª´ ng√†y:</label>
                <input type="date" id="startDate" />
            </div>
            <div class="filter-group">
                <label>üìÜ ƒê·∫øn ng√†y:</label>
                <input type="date" id="endDate" />
            </div>

            <!-- N√∫t xu·∫•t -->
            <button class="btn-export" onclick="applyFilter()">
                <span>üîÑ</span>
                <span>L·ªçc</span>
            </button>
            <button class="btn-export" onclick="exportReport()">
                <span>üì•</span>
                <span>Xu·∫•t b√°o c√°o</span>
            </button>
            <a href="/Admin/Report?handler=ExportAllPlantDetails" class="btn btn-success">
                Xu·∫•t t·∫•t c·∫£ c√¢y tr·ªìng
            </a>
        </div>


        <!-- Stats Cards -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-card-content">
                    <div class="stat-info">
                        <h3>T·ªïng s·ªë c√¢y tr·ªìng</h3>
                        <div class="stat-value" style="color: #10b981;">@Model.PlantSummary?.TotalPlants</div>

                    </div>
                    <div class="stat-icon" style="background: rgba(16, 185, 129, 0.1);">
                        <span style="color: #10b981;">üå±</span>
                    </div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-card-content">
                    <div class="stat-info">
                        <h3>T·ªïng s·ªë ng∆∞·ªùi d√πng</h3>
                        <div class="stat-value" style="color: #3b82f6;">@Model.UserSummary.TotalUsers</div>

                    </div>
                    <div class="stat-icon" style="background: rgba(59, 130, 246, 0.1);">
                        <span style="color: #3b82f6;">üë•</span>
                    </div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-card-content">
                    <div class="stat-info">
                        <h3>L∆∞·ª£t t√¨m ki·∫øm</h3>
                        <div class="stat-value" style="color: #f59e0b;">@Model.TopKeywords.Count</div>

                    </div>
                    <div class="stat-icon" style="background: rgba(245, 158, 11, 0.1);">
                        <span style="color: #f59e0b;">üîç</span>
                    </div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-card-content">
                    <div class="stat-info">
                        <h3>C√¢y y√™u th√≠ch</h3>
                        <div class="stat-value" style="color: #ef4444;">@Model.TopFavorites.Count</div>
                    </div>
                    <div class="stat-icon" style="background: rgba(239, 68, 68, 0.1);">
                        <span style="color: #ef4444;">‚ù§Ô∏è</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Row 1 -->
        <div class="charts-grid">
            <!-- Pie Chart -->
            <div class="chart-card">
                <div class="chart-header">
                    <h2>Ph√¢n b·ªë theo danh m·ª•c</h2>
                    <button class="btn-download" onclick="downloadChart('pieChart')">üì•</button>
                </div>
                <canvas id="pieChart"></canvas>
            </div>

            <!-- Line Chart -->
            <div class="chart-card">
                <div class="chart-header">
                    <h2>Xu h∆∞·ªõng t√¨m ki·∫øm</h2>
                    <button class="btn-download" onclick="downloadChart('lineChart')">üì•</button>
                </div>
                <canvas id="lineChart"></canvas>
            </div>
        </div>

        <!-- Charts Row 2 -->
        <div class="charts-grid">
            <!-- Bar Chart -->
            <div class="chart-card">
                <div class="chart-header">
                    <h2>Top c√¢y ƒë∆∞·ª£c y√™u th√≠ch</h2>
                    <button class="btn-download" onclick="downloadChart('barChart')">üì•</button>
                </div>
                <canvas id="barChart"></canvas>
            </div>

            <!-- Keywords List -->
            <div class="chart-card">
                <div class="chart-header">
                    <h2>T·ª´ kh√≥a t√¨m ki·∫øm ph·ªï bi·∫øn</h2>
                    <button class="btn-download" onclick="exportKeywords()">üì•</button>
                </div>
                <ul class="keywords-list" id="keywordsList"></ul>
            </div>
        </div>


        <!-- Summary Table -->
        <div class="summary-table">
            <div class="chart-header">
                <h2>B·∫£ng t·ªïng h·ª£p chi ti·∫øt</h2>
                <button class="btn-export" onclick="exportTableToExcel()">
                    <span>üì•</span>
                    <span>Xu·∫•t Excel</span>
                </button>
            </div>
            <table>
                <thead>
                    <tr>
                        <th>Danh m·ª•c</th>
                        <th style="text-align: right;">S·ªë l∆∞·ª£ng</th>
                        <th style="text-align: right;">T·ª∑ l·ªá</th>
                        <th style="text-align: right;">Xu h∆∞·ªõng</th>
                    </tr>
                </thead>
                <tbody id="summaryTableBody"></tbody>
            </table>
        </div>
    </div>

    <script>
        const categories = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.CategoryStats));

        const topFavorites = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.TopFavorites));
        const topKeywords = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.TopKeywords));


        // V√≠ d·ª• cho t·ªïng s·ªë, b·∫°n c√≥ th·ªÉ g√°n tr·ª±c ti·∫øp
        const totalPlants = @Model.PlantSummary?.TotalPlants ?? 0;
        const totalUsers = @Model.UserSummary?.TotalUsers ?? 0;

        console.log('categories:', categories);
        console.log('topFavorites:', topFavorites);
        console.log('topKeywords:', topKeywords);
        console.log('totalPlants:', totalPlants);
        console.log('totalUsers:', totalUsers);




        // Initialize Pie Chart
        const pieCtx = document.getElementById('pieChart').getContext('2d');
        new Chart(pieCtx, {
            type: 'pie',
            data: {
                labels: categories.map(c => c.CategoryName),
                datasets: [{
                    data: categories.map(c => c.PlantCount),
                    backgroundColor: [
                        '#10b981',
                        '#3b82f6',
                        '#f59e0b',
                        '#ef4444',
                        '#8b5cf6'
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });

        // Initialize Line Chart
        const lineCtx = document.getElementById('lineChart').getContext('2d');
        new Chart(lineCtx, {
            type: 'line',
            data: {
                labels: data.searchTrends.map(s => s.month),
                datasets: [{
                    label: 'L∆∞·ª£t t√¨m ki·∫øm',
                    data: data.searchTrends.map(s => s.searches),
                    borderColor: '#10b981',
                    backgroundColor: 'rgba(16, 185, 129, 0.1)',
                    tension: 0.4,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Initialize Bar Chart
        const barCtx = document.getElementById('barChart').getContext('2d');
        new Chart(barCtx, {
            type: 'bar',
            data: {
                labels: topFavorites.map(f => f.PlantName),
                datasets: [{
                    label: 'L∆∞·ª£t y√™u th√≠ch',
                    data: topFavorites.map(f => f.FavoriteCount),
                    backgroundColor: '#ef4444'
                }]
            },
            options: {
                responsive: true,
                indexAxis: 'y',
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    x: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Initialize New Plants Chart
        const newPlantsCtx = document.getElementById('newPlantsChart').getContext('2d');
        new Chart(newPlantsCtx, {
            type: 'bar',
            data: {
                labels: data.newPlants.map(p => p.month),
                datasets: [{
                    label: 'S·ªë l∆∞·ª£ng c√¢y m·ªõi',
                    data: data.newPlants.map(p => p.plants),
                    backgroundColor: '#10b981'
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

       

        // Render Keywords List
        const keywordsList = document.getElementById('keywordsList');
        const maxCount = data.topKeywords[0].count;
        data.topKeywords.forEach((item, index) => {
            const percentage = (item.count / maxCount) * 100;
            keywordsList.innerHTML += `
                <li class="keyword-item">
                    <div class="keyword-left">
                        <span class="keyword-rank">#${index + 1}</span>
                        <span class="keyword-name">${item.keyword}</span>
                    </div>
                    <div class="keyword-right">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${percentage}%"></div>
                        </div>
                        <span class="keyword-count">${item.count}</span>
                    </div>
                </li>
            `;
        });

        // Render Summary Table
        const tableBody = document.getElementById('summaryTableBody');
        data.categories.forEach(item => {
            const trend = (Math.random() * 10).toFixed(1);
            tableBody.innerHTML += `
                <tr>
                    <td>${item.name}</td>
                    <td style="text-align: right;">${item.count}</td>
                    <td style="text-align: right;">${item.percentage}%</td>
                    <td style="text-align: right;">
                        <span class="trend-up">‚Üó +${trend}%</span>
                    </td>
                </tr>
            `;
        });

        // Export Functions
        function downloadChart(chartId) {
            const canvas = document.getElementById(chartId);
            const url = canvas.toDataURL('image/png');
            const link = document.createElement('a');
            link.download = `${chartId}_${new Date().toISOString().split('T')[0]}.png`;
            link.href = url;
            link.click();
            alert('ƒê√£ t·∫£i xu·ªëng bi·ªÉu ƒë·ªì!');
        }

        const today = new Date().toISOString().split("T")[0];
        document.getElementById("startDate").setAttribute("max", today);
        document.getElementById("endDate").setAttribute("max", today);

        function applyFilter() {
            const range = document.getElementById("dateRange").value;
            const start = document.getElementById("startDate").value;
            const end = document.getElementById("endDate").value;
            let url = "/Admin/Report?dateRange=" + range;
            if (start) url += "&startDate=" + start;
            if (end) url += "&endDate=" + end;
            window.location.href = url;
        }

        function exportKeywords() {
            const csv = 'STT,T·ª´ kh√≥a,S·ªë l∆∞·ª£t t√¨m\n' +
                data.topKeywords.map((k, i) => `${i + 1},${k.keyword},${k.count}`).join('\n');
            downloadCSV(csv, 'tu-khoa-tim-kiem');
        }

        function exportReport() {
            const csv = 'Danh m·ª•c,S·ªë l∆∞·ª£ng,T·ª∑ l·ªá\n' +
                data.categories.map(c => `${c.name},${c.count},${c.percentage}%`).join('\n');
            downloadCSV(csv, 'bao-cao-tong-quan');
        }

        function exportTableToExcel() {
            const csv = 'Danh m·ª•c,S·ªë l∆∞·ª£ng,T·ª∑ l·ªá,Xu h∆∞·ªõng\n' +
                data.categories.map(c => {
                    const trend = (Math.random() * 10).toFixed(1);
                    return `${c.name},${c.count},${c.percentage}%,+${trend}%`;
                }).join('\n');
            downloadCSV(csv, 'bang-tong-hop');
        }

        function downloadCSV(content, filename) {
            const BOM = '\uFEFF';
            const blob = new Blob([BOM + content], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `${filename}_${new Date().toISOString().split('T')[0]}.csv`;
            link.click();
            alert('ƒê√£ xu·∫•t b√°o c√°o th√†nh c√¥ng!');
        }
    </script>
</body>

</html>